Q1: Replace employee ID with the unique identifier

Write a solution to show the unique ID of each user, If a user does not have a unique ID replace just show null.
Return the result table in any order.

Example 1:

Input: 
Employees table:
+----+----------+
| id | name     |
+----+----------+
| 1  | Alice    |
| 7  | Bob      |
| 11 | Meir     |
| 90 | Winston  |
| 3  | Jonathan |
+----+----------+
EmployeeUNI table:
+----+-----------+
| id | unique_id |
+----+-----------+
| 3  | 1         |
| 11 | 2         |
| 90 | 3         |
+----+-----------+
Output: 
+-----------+----------+
| unique_id | name     |
+-----------+----------+
------------------------------------------------------------------------------------
Solution:

SELECT IFNULL(employeeuni.unique_id, NULL) AS unique_id,                   -- Selects the unique_id from EmployeeUNI or NULL if no match
       employees.name                                                      -- Selects the name of the employee from Employees
FROM employees                                                             -- Specifies the Employees table as the main (left) table
LEFT JOIN employeeuni                                                      -- Performs a LEFT JOIN to include all rows from Employees
ON employees.id = employeeuni.id;                                          -- Matches rows where the id from Employees equals the id from EmployeeUNI
------------------------------------------------------------------------------------
üéØ Tips:

1-Why Use LEFT JOIN?ü§∑‚Äç‚ôÄÔ∏è
‚Åï Use LEFT JOIN when you need all rows from the left table (Employees), regardless of whether there is a match in the right table (EmployeeUNI).
2-IFNULL Clarification:
‚Åï The IFNULL function is optional in this case because LEFT JOIN will already produce NULL for unmatched rows. However, including it explicitly can make the intent 
clearer.
3-Improving Readability:
‚Åï If you don‚Äôt need to explicitly use IFNULL, you can simplify the query by directly selecting employeeuni.unique_id since unmatched rows will naturally result in 
NULL.
4-Potential Use Case:
‚Åï This query is helpful for identifying employees who don‚Äôt have an associated unique_id in the EmployeeUNI table (those rows will have NULL in the unique_id column).

*********************************************************************************************************************************************************************
Q2: Product sales analysis:

Write a solution to report the product_name, year, and price for each sale_id in the Sales table.
Return the resulting table in any order.

Example 1:

Input: 
Sales table:
+---------+------------+------+----------+-------+
| sale_id | product_id | year | quantity | price |
+---------+------------+------+----------+-------+ 
| 1       | 100        | 2008 | 10       | 5000  |
| 2       | 100        | 2009 | 12       | 5000  |
| 7       | 200        | 2011 | 15       | 9000  |
+---------+------------+------+----------+-------+
Product table:
+------------+--------------+
| product_id | product_name |
+------------+--------------+
| 100        | Nokia        |
| 200        | Apple        |
| 300        | Samsung      |
+------------+--------------+
Output: 
+--------------+-------+-------+
| product_name | year  | price |
+--------------+-------+-------+
| Nokia        | 2008  | 5000  |
| Nokia        | 2009  | 5000  |
| Apple        | 2011  | 9000  |
+--------------+-------+-------+
------------------------------------------------------------------------------------
Solution: 
SELECT p.product_name,                                            -- Selects the name of the product from the Product table
       s.year,                                                    -- Selects the year of the sale from the Sales table
       s.price                                                    -- Selects the price of the product from the Sales table
FROM sales s                                                      -- Specifies the Sales table (aliased as 's') as the primary table
JOIN product p                                                    -- Performs an INNER JOIN with the Product table (aliased as 'p')
ON s.product_id = p.product_id;                                   -- Matches rows where product_id in Sales equals product_id in Product
***************************************************************************************************************************************************
Q3: Customer who visited but didn't make any transactions:

Write a solution to find the IDs of the users who visited without making any transactions and the number of times they made these types of visits.
Return the result table sorted in any order.

Example 1:

Input: 
Visits
+----------+-------------+
| visit_id | customer_id |
+----------+-------------+
| 1        | 23          |
| 2        | 9           |
| 4        | 30          |
| 5        | 54          |
| 6        | 96          |
| 7        | 54          |
| 8        | 54          |
+----------+-------------+
Transactions
+----------------+----------+--------+
| transaction_id | visit_id | amount |
+----------------+----------+--------+
| 2              | 5        | 310    |
| 3              | 5        | 300    |
| 9              | 5        | 200    |
| 12             | 1        | 910    |
| 13             | 2        | 970    |
+----------------+----------+--------+
Output: 
+-------------+----------------+
| customer_id | count_no_trans |
+-------------+----------------+
| 54          | 2              |
| 30          | 1              |
| 96          | 1              |
+-------------+----------------+
------------------------------------------------------------------------------------
Solution:
SELECT v.customer_id,                                  -- Selects the customer ID from the Visits table
       COUNT(v.customer_id) AS count_no_trans          -- Counts the number of visits without transactions for each customer
FROM visits v                                          -- Specifies the Visits table (aliased as 'v') as the main table
LEFT JOIN transactions t                               -- Performs a LEFT JOIN with the Transactions table (aliased as 't')
ON v.visit_id = t.visit_id                             -- Matches rows where the visit_id in Visits equals visit_id in Transactions
WHERE t.transaction_id IS NULL                         -- Filters only rows where there is no matching transaction (no transaction_id)
GROUP BY v.customer_id;                                -- Groups the result by customer ID to calculate counts per customer
------------------------------------------------------------------------------------
üéØ Tips: 

Why a LEFT JOIN is Used?:ü§∑‚Äç‚ôÄÔ∏è
1- Include All Rows from the Left Table:
üéáA LEFT JOIN ensures that all rows from the Visits table are included in the result, even if there is no corresponding entry in the Transactions table.

2-Identify Missing Matches:
üéáRows where t.transaction_id is NULL indicate visits that do not have an associated transaction. 
This behavior is key to identifying customers with visits but no transactions.

3-Preserve Data Integrity:
üéáUsing a LEFT JOIN prevents the exclusion of rows from Visits, which might happen with an INNER JOIN. 
This ensures we do not lose any customers or visits when analyzing missing transactions.

4-Filtering with WHERE t.transaction_id IS NULL:ü§∑‚Äç‚ôÄÔ∏è 
üéáThe WHERE clause specifically focuses on the rows where no match exists in the Transactions table, which is crucial for the intended analysis.

5-Group and Aggregate:ü§∑‚Äç‚ôÄÔ∏è
üéáThe GROUP BY clause groups the data by customer_id, allowing the COUNT function to compute the number of visits without transactions for each customer.
***************************************************************************************************************************************************










