Q1: Recyclable and low-fat products:

Write a solution to find the IDs of products that are both low-fat and recyclable.
Return the result table in any order.

The result format is in the following example.
Example 1:
Input: 
Products table:
+-------------+----------+------------+
| product_id  | low_fats | recyclable |
+-------------+----------+------------+
| 0           | Y        | N          |
| 1           | Y        | Y          |
| 2           | N        | Y          |
| 3           | Y        | Y          |
| 4           | N        | N          |
+-------------+----------+------------+
Output: 
+-------------+
| product_id  |
+-------------+
| 1           |
| 3           |
+-------------+
Explanation: Only products 1 and 3 are both low-fat and recyclable.
-------------------------------------------------------------------------------------------------------------------------
Solution:

SELECT product_id                        -- Select the product_id column from the Products table
FROM Products                            -- Filter rows where the product has low fat ('Y') 
WHERE low_fats = 'Y' 
AND recyclable = 'Y';                    -- AND the product is recyclable ('Y')
************************************************************************************************************************************
Q2: Find customer referee:

Find the names of the customer that are not referred by the customer with id = 2.
Return the result table in any order.
The result format is in the following example.
Example 1:

Input: 
Customer table:
+----+------+------------+
| id | name | referee_id |
+----+------+------------+
| 1  | Will | null       |
| 2  | Jane | null       |
| 3  | Alex | 2          |
| 4  | Bill | null       |
| 5  | Zack | 1          |
| 6  | Mark | 2          |
+----+------+------------+
Output: 
+------+
| name |
+------+
| Will |
| Jane |
| Bill |
| Zack |
+------+
-------------------------------------------------------------------------------------------------------------------------
Solution:

SELECT name                                            -- Select the name column from the Customer table
FROM Customer
WHERE referee_id IS NULL                              -- Filter rows where referee_id is either NULL
OR referee_id <> 2;                                   -- OR referee_id is not equal to 2

ðŸŽ¯Tips: 
1-Always consider NULL values explicitly using IS NULL or IS NOT NULL.
2-Ensure logical operators (OR, AND) are correctly used to avoid unintended results.
3-Use standard SQL operators (<>) for better readability and compatibility.
************************************************************************************************************************************
Q3: Big countries:

Write a solution to find the name, population, and area of the big countries.
Return the result table in any order.
Example 1:

Input: 
World table:
+-------------+-----------+---------+------------+--------------+
| name        | continent | area    | population | gdp          |
+-------------+-----------+---------+------------+--------------+
| Afghanistan | Asia      | 652230  | 25500100   | 20343000000  |
| Albania     | Europe    | 28748   | 2831741    | 12960000000  |
| Algeria     | Africa    | 2381741 | 37100000   | 188681000000 |
| Andorra     | Europe    | 468     | 78115      | 3712000000   |
| Angola      | Africa    | 1246700 | 20609294   | 100990000000 |
+-------------+-----------+---------+------------+--------------+
Output: 
+-------------+------------+---------+
| name        | population | area    |
+-------------+------------+---------+
| Afghanistan | 25500100   | 652230  |
| Algeria     | 37100000   | 2381741 |
+-------------+------------+---------+
-------------------------------------------------------------------------------------------------------------------------
Solution:
SELECT name, area, population 
FROM world
WHERE population >=25000000 OR area >= 3000000;

ðŸŽ¯Tips:
1-The OR operator ensures that either one or both conditions are true, resulting in the row being included in the output.
2-Rows are returned if they meet at least one of the conditions.
************************************************************************************************************************************
Q4: Article views:

Write a solution to find all the authors that viewed at least one of their own articles.
Return the result table sorted by id in ascending order.
Example 1:

Input: 
Views table:
+------------+-----------+-----------+------------+
| article_id | author_id | viewer_id | view_date  |
+------------+-----------+-----------+------------+
| 1          | 3         | 5         | 2019-08-01 |
| 1          | 3         | 6         | 2019-08-02 |
| 2          | 7         | 7         | 2019-08-01 |
| 2          | 7         | 6         | 2019-08-02 |
| 4          | 7         | 1         | 2019-07-22 |
| 3          | 4         | 4         | 2019-07-21 |
| 3          | 4         | 4         | 2019-07-21 |
+------------+-----------+-----------+------------+
Output: 
+------+
| id   |
+------+
| 4    |
| 7    |
+------+
-------------------------------------------------------------------------------------------------------------------------
Solution:

SELECT DISTINCT author_id AS id                           -- Select unique author IDs from the Views table
                                                          -- Alias the column 'author_id' as 'id' for clarity in the result set
FROM views                                                -- Specify the table to query data from: 'views'

WHERE author_id = viewer_id                               -- Filter rows where the author is also the viewer of the article (self-viewed articles)

ORDER BY id;                                              -- Sort the result by the 'id' column (author_id) in ascending order (default behavior)

ðŸŽ¯Tips: 

1- DISTINCT: Ensures that duplicate author IDs are removed, returning only unique IDs.
2- WHERE author_id = viewer_id: Focuses on cases where the same person authored and viewed the article.
3- ORDER BY: Ensures that the results are sorted in an orderly fashion by the author ID.
************************************************************************************************************************************
Q5:Invalid Tweets: 

Write a solution to find the IDs of the invalid tweets. The tweet is invalid if the number of characters used in the content of the tweet is strictly greater than 15.
Return the result table in any order.

Example 1:

Input: 
Tweets table:
+----------+-----------------------------------+
| tweet_id | content                           |
+----------+-----------------------------------+
| 1        | Let us Code                       |
| 2        | More than fifteen chars are here! |
+----------+-----------------------------------+
Output: 
+----------+
| tweet_id |
+----------+
| 2        |
+----------+
-------------------------------------------------------------------------------------------------------------------------
Solution:

SELECT  tweet_id
FROM tweets
WHERE LENGTH(content) > 15;

ðŸŽ¯Tips: 
1- Use the LENGTH function to evaluate the size of string columns, which is useful for filtering text-based data.
************************************************************************************************************************************


































