Q1:Number of unique subjects taught by each teacher:

Write a solution to calculate the number of unique subjects each teacher teaches in the university.
Return the result table in any order.

Input: 
Teacher table:
+------------+------------+---------+
| teacher_id | subject_id | dept_id |
+------------+------------+---------+
| 1          | 2          | 3       |
| 1          | 2          | 4       |
| 1          | 3          | 3       |
| 2          | 1          | 1       |
| 2          | 2          | 1       |
| 2          | 3          | 1       |
| 2          | 4          | 1       |
+------------+------------+---------+
Output:  
+------------+-----+
| teacher_id | cnt |
+------------+-----+
| 1          | 2   |
| 2          | 4   |
+------------+-----+
------------------------------------------------------------------------------------------------------------------------------------------
Solution:

SELECT teacher_id ,COUNT(DISTINCT subject_id) AS cnt                                 -- Count unique subjects taught by the teacher
FROM teacher
GROUP BY teacher_id;                                                                 -- Group data by teacher to get counts per teacher
------------------------------------------------------------------------------------------------------------------------------------------
🎯 Tips:

1-COUNT(DISTINCT subject_id):
Ensures that each subject is counted only once for each teacher, even if it appears in different departments (dept_id).

2-GROUP BY teacher_id:
Groups the data by teacher_id to calculate the unique subject count for each teacher.

3-Result:
Produces a table where each row contains a teacher_id and the count of unique subjects (cnt) they teach.
*********************************************************************************************************************************************************************
Q2: User activity for the past 30 days I:

Write a solution to find the daily active user count for a period of 30 days ending 2019-07-27 inclusively. 
A user was active on someday if they made at least one activity on that day.
Return the result table in any order.

Input: 
Activity table:
+---------+------------+---------------+---------------+
| user_id | session_id | activity_date | activity_type |
+---------+------------+---------------+---------------+
| 1       | 1          | 2019-07-20    | open_session  |
| 1       | 1          | 2019-07-20    | scroll_down   |
| 1       | 1          | 2019-07-20    | end_session   |
| 2       | 4          | 2019-07-20    | open_session  |
| 2       | 4          | 2019-07-21    | send_message  |
| 2       | 4          | 2019-07-21    | end_session   |
| 3       | 2          | 2019-07-21    | open_session  |
| 3       | 2          | 2019-07-21    | send_message  |
| 3       | 2          | 2019-07-21    | end_session   |
| 4       | 3          | 2019-06-25    | open_session  |
| 4       | 3          | 2019-06-25    | end_session   |
+---------+------------+---------------+---------------+
Output: 
+------------+--------------+ 
| day        | active_users |
+------------+--------------+ 
| 2019-07-20 | 2            |
| 2019-07-21 | 2            |
+------------+--------------+ 
------------------------------------------------------------------------------------------------------------------------------------------
Solution:
SELECT activity_date AS day,
       COUNT(DISTINCT user_id) AS active_users               -- Count unique users who were active on that day
FROM activity
WHERE activity_date BETWEEN '2019-06-28' AND '2019-07-27'    -- 30-day period ending on 2019-07-27
GROUP BY activity_date;                                      -- Group by each day to calculate the active user count
------------------------------------------------------------------------------------------------------------------------------------------
🎯 Tips:

1-Filter the Date Range:
Use WHERE activity_date BETWEEN '2019-06-28' AND '2019-07-27' to include only activities within the last 30 days.

2-Count Distinct Users:
Use COUNT(DISTINCT user_id) to ensure each user is counted only once per day.

3-Group by Activity Date:
Group the results by activity_date to get the daily count.
------------------------------------------------------------------------------------------------------------------------------------------
👌Key Takeaways:

Why Only Group by activity_date?🤷‍♀️

🎇Purpose:
The query is designed to calculate daily active users, meaning we need a single count of unique user_ids for each activity_date.
GROUP BY activity_date ensures the result is aggregated by each day.

🎇Impact of Grouping by user_id:
If you add user_id to the GROUP BY clause, the query would calculate data per user per day instead of a single count for each day.
This would break the COUNT(DISTINCT user_id) logic because each row in the result would represent a unique user for a specific date.
*********************************************************************************************************************************************************************
Q3:Product sales analysis III:

Write a solution to select the product id, year, quantity, and price for the first year of every product sold.
Return the resulting table in any order.

Input: 
Sales table:
+---------+------------+------+----------+-------+
| sale_id | product_id | year | quantity | price |
+---------+------------+------+----------+-------+ 
| 1       | 100        | 2008 | 10       | 5000  |
| 2       | 100        | 2009 | 12       | 5000  |
| 7       | 200        | 2011 | 15       | 9000  |
+---------+------------+------+----------+-------+
Product table:
+------------+--------------+
| product_id | product_name |
+------------+--------------+
| 100        | Nokia        |
| 200        | Apple        |
| 300        | Samsung      |
+------------+--------------+
Output: 
+------------+------------+----------+-------+
| product_id | first_year | quantity | price |
+------------+------------+----------+-------+ 
| 100        | 2008       | 10       | 5000  |
| 200        | 2011       | 15       | 9000  |
+------------+------------+----------+-------+
------------------------------------------------------------------------------------------------------------------------------------------
✨Solution 1: Using Join

SELECT s.product_id, 
       s.year AS first_year, 
       s.quantity, 
       s.price
FROM Sales s
JOIN (
    SELECT product_id, MIN(year) AS first_year
    FROM Sales
    GROUP BY product_id
) AS first_sales
ON s.product_id = first_sales.product_id
AND s.year = first_sales.first_year;

👌Explanation:

1-Subquery (first_sales): The subquery selects the minimum year for each product_id and aliases it as first_year.

2-JOIN: The main query then joins the Sales table with the result of the subquery using product_id and year to ensure that 
we get the quantity and price corresponding to the first sale year for each product.

3-GROUP BY: The subquery uses GROUP BY product_id to group the data by product_id and find the earliest year for each product.
------------------------------------------------------------------------------------------------------------------------------------------
✨Solution 2: Using CTE

WITH FirstSales AS (
    SELECT product_id, MIN(year) AS first_year
    FROM Sales
    GROUP BY product_id)
SELECT s.product_id, 
       s.year AS first_year, 
       s.quantity, 
       s.price
FROM Sales s
JOIN FirstSales fs
ON s.product_id = fs.product_id
AND s.year = fs.first_year;

👌Explanation:

1-CTE (FirstSales): The WITH clause defines the CTE, which selects the product_id and the MIN(year) as first_year for each product_id. 
This CTE is like a temporary result set.

2-JOIN: The main query then joins the Sales table with the CTE (FirstSales) based on product_id and year, 
ensuring that we get the correct quantity and price for the first sale year of each product.
*********************************************************************************************************************************************************************
Q4: Classes more than 5 students:

Write a solution to find all the classes that have at least five students.
Return the result table in any order.

Input: 
Courses table:
+---------+----------+
| student | class    |
+---------+----------+
| A       | Math     |
| B       | English  |
| C       | Math     |
| D       | Biology  |
| E       | Math     |
| F       | Computer |
| G       | Math     |
| H       | Math     |
| I       | Math     |
+---------+----------+
Output: 
+---------+
| class   |
+---------+
| Math    |
+---------+

------------------------------------------------------------------------------------------------------------------------------------------
Solution :

SELECT class
FROM Courses
GROUP BY class
HAVING COUNT(student) >= 5;
------------------------------------------------------------------------------------------------------------------------------------------
🎯Tips:

1-GROUP BY class: Group the records by the class column so that each class will have its own group.

2-HAVING COUNT(student) >= 5: The HAVING clause filters the results to include only those classes where the number of students (count of student) is greater than or equal to 5.

*********************************************************************************************************************************************************************













